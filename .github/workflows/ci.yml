name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: template_test

jobs:
  # Client Tests
  client-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test:run

    - name: Run test coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: client
        name: client-coverage

  # Server Tests
  server-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup test database
      run: |
        createdb template_test || true
        npm run migrate
      env:
        PG_USER: postgres
        PG_HOST: localhost
        PG_DATABASE: template_test
        PG_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PG_PORT: 5432
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: Run linting
      run: npm run lint
      env:
        PG_USER: postgres
        PG_HOST: localhost
        PG_DATABASE: template_test
        PG_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PG_PORT: 5432
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: Run type checking
      run: npm run type-check
      env:
        PG_USER: postgres
        PG_HOST: localhost
        PG_DATABASE: template_test
        PG_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PG_PORT: 5432
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: Run tests
      run: npm run test
      env:
        PG_USER: postgres
        PG_HOST: localhost
        PG_DATABASE: template_test
        PG_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PG_PORT: 5432
        JWT_SECRET: test-secret-key

    - name: Run test coverage
      run: npm run test:coverage
      env:
        PG_USER: postgres
        PG_HOST: localhost
        PG_DATABASE: template_test
        PG_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        PG_PORT: 5432
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: server
        name: server-coverage

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Integration
  build-test:
    runs-on: ubuntu-latest
    needs: [client-tests, server-tests]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install client dependencies
      run: npm run setup:client

    - name: Install server dependencies
      run: npm run setup:server

    - name: Build client
      run: npm run build:client

    - name: Build server
      run: npm run build:server

  # Deploy to staging (only on develop branch)
  deploy-staging:
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to production (only on main branch)
  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your deployment commands here
        # Example: docker-compose -f docker-compose.prod.yml up -d
