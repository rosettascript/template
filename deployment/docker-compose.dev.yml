version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: template-postgres-dev
    environment:
      POSTGRES_DB: template_db_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./server/src/database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - template-dev-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: template-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - template-dev-network

  # Server Application (Development)
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: template-server-dev
    environment:
      NODE_ENV: development
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DATABASE: template_db_dev
      PG_USER: postgres
      PG_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev-jwt-secret-key
      PORT: 5000
      LOG_LEVEL: debug
    ports:
      - "5000:5000"
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - template-dev-network

volumes:
  postgres_dev_data:
  redis_dev_data:

networks:
  template-dev-network:
    driver: bridge
