version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: template-postgres
    environment:
      POSTGRES_DB: template_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/src/database:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - template-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: template-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - template-network

  # Server Application
  server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: template-server
    environment:
      NODE_ENV: production
      PG_HOST: postgres
      PG_PORT: 5432
      PG_DATABASE: template_db
      PG_USER: postgres
      PG_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./server/uploads:/app/uploads
      - ./server/logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "dist/scripts/health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - template-network

  # Client Application
  client:
    build:
      context: .
      dockerfile: Dockerfile.client
    container_name: template-client
    ports:
      - "80:80"
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - template-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: template-nginx
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - client
      - server
    networks:
      - template-network

volumes:
  postgres_data:
  redis_data:

networks:
  template-network:
    driver: bridge
